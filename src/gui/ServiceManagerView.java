/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ServiceManagerView.java
 *
 * Created on Jan 6, 2011, 11:46:03 AM
 */

package gui;

import converter.GlobalProperty;
import entities.Service;
import java.awt.EventQueue;
import java.beans.Beans;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.RollbackException;
import javax.swing.JFrame;
import javax.swing.JPanel;
import entities.ServiceTicket;
import entities.Ticket;
import entities.TimeProcessor;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;
/**
 *
 * @author Tuan Vu
 */
public class ServiceManagerView extends JPanel {
    List<Service> sList = GlobalProperty.getInstance().getServiceList();
    private Ticket ticket;
    public ServiceManagerView(Ticket t) {
        ticket = t;
        initComponents();
        cbxService.removeAllItems();
        //List<Service> sList = GlobalProperty.getServiceList();
        if (sList !=null )
        for (int i = 0; i < sList.size();i++) {
            cbxService.addItem(sList.get(i).getAlias());
        }
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
        /*
        if (list.size()>0) {
            masterTable.selectAll();
        }*/
    }

    public String getQuery () {
        return "SELECT s FROM ServiceTicket s WHERE s.ticket.ticketId = " + ticket.getTicketId();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("QLPMPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery(getQuery());
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        jButton1 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        priceLabel = new javax.swing.JLabel();
        serviceLogLabel = new javax.swing.JLabel();
        targetLogLabel = new javax.swing.JLabel();
        noteLabel = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        serviceLogField = new javax.swing.JTextField();
        targetLogField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        cbxService = new javax.swing.JComboBox();
        tfPriceRange = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        taNote = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        serviceLogLabel1 = new javax.swing.JLabel();
        serviceLogLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        jButton1.setText("jButton1");

        jTextField5.setText("jTextField5");

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${targetLog}"));
        columnBinding.setColumnName("Răng hàm");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${serviceLog}"));
        columnBinding.setColumnName("Dịch vụ");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${price}"));
        columnBinding.setColumnName("Giá");
        columnBinding.setColumnClass(Double.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterTable.addMouseListener(formListener);
        masterScrollPane.setViewportView(masterTable);
        masterTable.getColumnModel().getColumn(0).setMinWidth(50);
        masterTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        masterTable.getColumnModel().getColumn(1).setMinWidth(80);
        masterTable.getColumnModel().getColumn(1).setPreferredWidth(125);
        masterTable.getColumnModel().getColumn(2).setMinWidth(40);
        masterTable.getColumnModel().getColumn(2).setPreferredWidth(40);

        priceLabel.setText("Giá");

        serviceLogLabel.setText("Mã dịch vụ");

        targetLogLabel.setText("Răng/hàm");

        noteLabel.setText("Ghi chú");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.price}"), priceField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), priceField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.serviceLog}"), serviceLogField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), serviceLogField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.targetLog}"), targetLogField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue(null);
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), targetLogField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        saveButton.setText("Lưu");
        saveButton.addActionListener(formListener);

        refreshButton.setText("Cập nhật");
        refreshButton.addActionListener(formListener);

        newButton.setText("Thêm dịch vụ");
        newButton.addActionListener(formListener);

        deleteButton.setText("Xóa");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteButton.addActionListener(formListener);

        cbxService.setEditable(true);
        cbxService.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), cbxService, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        cbxService.addMouseListener(formListener);
        cbxService.addItemListener(formListener);
        cbxService.addActionListener(formListener);
        cbxService.addPropertyChangeListener(formListener);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), tfPriceRange, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        taNote.setColumns(20);
        taNote.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.note}"), taNote, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), taNote, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(taNote);

        jLabel1.setText("Tổng cộng");

        jTextField1.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${ticket.totalPayment}"), jTextField1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextField1.addActionListener(formListener);

        serviceLogLabel1.setText("Dịch vụ");

        serviceLogLabel2.setText("Khoảng giá");

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(qlpm.QLPMApp.class).getContext().getActionMap(ServiceManagerView.class, this);
        jButton2.setAction(actionMap.get("calculateSum")); // NOI18N
        jButton2.setText("Tính tiền");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(targetLogLabel)
                            .addComponent(jLabel1)
                            .addComponent(noteLabel)
                            .addComponent(priceLabel)
                            .addComponent(serviceLogLabel1)
                            .addComponent(serviceLogLabel)
                            .addComponent(serviceLogLabel2))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serviceLogField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                            .addComponent(tfPriceRange, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                            .addComponent(priceField, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                            .addComponent(cbxService, javax.swing.GroupLayout.Alignment.TRAILING, 0, 442, Short.MAX_VALUE)
                            .addComponent(targetLogField, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteButton, newButton, refreshButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetLogField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetLogLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxService, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serviceLogLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceLogField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serviceLogLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfPriceRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serviceLogLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveButton)
                            .addComponent(refreshButton)
                            .addComponent(deleteButton)
                            .addComponent(newButton)))
                    .addComponent(noteLabel))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.ItemListener, java.awt.event.MouseListener, java.beans.PropertyChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == saveButton) {
                ServiceManagerView.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                ServiceManagerView.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                ServiceManagerView.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                ServiceManagerView.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == cbxService) {
                ServiceManagerView.this.cbxServiceActionPerformed(evt);
            }
            else if (evt.getSource() == jTextField1) {
                ServiceManagerView.this.jTextField1ActionPerformed(evt);
            }
        }

        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            if (evt.getSource() == cbxService) {
                ServiceManagerView.this.cbxServiceItemStateChanged(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == masterTable) {
                ServiceManagerView.this.masterTableMouseClicked(evt);
            }
            else if (evt.getSource() == cbxService) {
                ServiceManagerView.this.cbxServiceMouseClicked(evt);
            }
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == masterTable) {
                ServiceManagerView.this.masterTableMouseReleased(evt);
            }
            else if (evt.getSource() == cbxService) {
                ServiceManagerView.this.cbxServiceMouseReleased(evt);
            }
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == cbxService) {
                ServiceManagerView.this.cbxServicePropertyChange(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents


    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int[] selected = masterTable.getSelectedRows();
        List<ServiceTicket> toRemove = new ArrayList<ServiceTicket>(selected.length);
        for (int idx=0; idx<selected.length; idx++) {
            ServiceTicket s = list.get(masterTable.convertRowIndexToModel(selected[idx]));
            toRemove.add(s);
            entityManager.remove(s);
        }
        list.removeAll(toRemove);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        ServiceTicket s = new ServiceTicket();

        s.setTicket(ticket);
        cbxService.setSelectedIndex(-1);
        taNote.setText("");
        entityManager.persist(s);
        //s.setService(sList.get(cbxService.getSelectedIndex()));
        list.add(s);
        int row = list.size()-1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        setSum();
        ticket.setTotalPayment(sum);
        if (targetLogField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Xin điền đối tượng răng /hàm");
        }  else if (serviceLogField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Xin điền vào ô dich vụ");
        } else if (priceField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Xin điền vào ô giá");
        } else
        try {
            ticket.setLastAccess(TimeProcessor.getInstance().getIntegerFromCurrentDate());
            entityManager.merge(ticket);
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
        } catch (RollbackException rex) {
            rex.printStackTrace();
            entityManager.getTransaction().begin();
            List<ServiceTicket> merged = new ArrayList<ServiceTicket>(list.size());
            for (ServiceTicket s : list) {
                merged.add(entityManager.merge(s));
            }
            list.clear();
            list.addAll(merged);
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void cbxServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxServiceActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cbxServiceActionPerformed

    private void cbxServicePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cbxServicePropertyChange
        // TODO add your handling code here:

        if (evt.getPropertyName().compareTo("selectedIndex")==0) {
            // TODO add your handling code here:
            int i  = masterTable.getSelectedRow();
            if (i==-1) return;
            int j = masterTable.convertRowIndexToModel(i);
            ServiceTicket s = list.get(j);

            int k =-1 ;
            for ( int l = 0; l < sList.size();l++) {
                if (s.getServiceLog().compareTo(sList.get(l).getServiceName())==0) {
                    k = l;
                }
            }

            cbxService.setSelectedIndex(k);
        }

    }//GEN-LAST:event_cbxServicePropertyChange

    private void masterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseClicked
        // TODO add your handling code here:
        //int s = masterTable.convertRowIndexToModel(masterTable.getSelectedRow());
        // TODO add your handling code here:
            int i  = masterTable.getSelectedRow();
            if (i==-1) return;
            int j = masterTable.convertRowIndexToModel(i);
            ServiceTicket s = list.get(j);

            int k =-1 ;
            for ( int l = 0; l < sList.size();l++) {
                if (s.getServiceLog().compareTo(sList.get(l).getServiceName())==0) {
                    k = l;
                }
            }

            cbxService.setSelectedIndex(k);
    }//GEN-LAST:event_masterTableMouseClicked

    private void masterTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_masterTableMouseReleased

    }//GEN-LAST:event_masterTableMouseReleased

    private void cbxServiceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxServiceMouseReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_cbxServiceMouseReleased

    private void cbxServiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxServiceMouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:

    }//GEN-LAST:event_cbxServiceMouseClicked

    private void cbxServiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxServiceItemStateChanged
        // TODO add your handling code here:
        // TODO add your handling code here:
        if (sList== null||cbxService.getSelectedIndex()>sList.size()||masterTable.getSelectedRow()==-1) return;
        if (cbxService.getSelectedIndex()!=-1 ){
            Service s = sList.get(cbxService.getSelectedIndex());
            priceField.setText(""+ s.getLowerPrice());
            tfPriceRange.setText("" + s.getLowerPrice() + "-" + s.getUpperPrice());
            serviceLogField.setText(s.getServiceName());
        }
    }//GEN-LAST:event_cbxServiceItemStateChanged

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    @Action
    public void calculateSum () {
        calculate();
        ticket.setTotalPayment(sum);
        entityManager.merge(ticket);
        jTextField1.setText(""+sum);
    }


    public int getSelectedIndexForCbx () {

        int i  = masterTable.getSelectedRow();
        if (i==-1) return -1;
        int j = masterTable.convertRowIndexToModel(i);
        ServiceTicket s = list.get(j);

        int k =-1 ;
        for ( int l = 0; l < sList.size();l++) {
            if (s.getServiceLog().compareTo(sList.get(l).getServiceName())==0) {
                k = l;
            }
        }
        return i;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbxService;
    private javax.swing.JButton deleteButton;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField5;
    private java.util.List<ServiceTicket> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField serviceLogField;
    private javax.swing.JLabel serviceLogLabel;
    private javax.swing.JLabel serviceLogLabel1;
    private javax.swing.JLabel serviceLogLabel2;
    private javax.swing.JTextArea taNote;
    private javax.swing.JTextField targetLogField;
    private javax.swing.JLabel targetLogLabel;
    private javax.swing.JTextField tfPriceRange;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    /*
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new ServiceManagerView());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }
    */
    private double sum ;


    public double getSum() {
        return sum;
    }

    public void setSum () {
        double s = 0.0;
        for (int i = 0; i <list.size();i++) {
            s+= list.get(i).getPrice();
        }
        sum = s;
    }


    public void calculate () {
        setSum();

    }

    public Ticket getTicket() {
        return ticket;
    }

    public void setTicket(Ticket ticket) {
        this.ticket = ticket;
    }


}
